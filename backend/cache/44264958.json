{"hn_id": "44264958", "title": "Jemalloc Postmortem", "url": "https://news.ycombinator.com/item?id=44264958", "article_url": "https://jasone.github.io/2025/06/12/jemalloc-postmortem/", "points": 668, "author": "jasone", "comments_count": 198, "time": 0, "full_article_html": "<div class=\"d-md-flex min-height-full border-md-bottom\">\n<div class=\"flex-self-stretch border-md-right border-gray-light bg-white col-md-5 col-lg-4 col-xl-3 px-4 px-md-6 px-lg-7 py-6\">\n<img alt=\"Article image\" class=\"circle mb-3\" data-src=\"https://avatars.githubusercontent.com/u/245970?v=4\" loading=\"lazy\" onerror=\"this.style.display='none'\" src=\"https://avatars.githubusercontent.com/u/245970?v=4\" style=\"max-width: 150px;\"/>\n<h1 class=\"mb-2 lh-condensed\">Jason Evans</h1>\n<p class=\"mb-3 f4 text-gray\">\n</p>\n<div class=\"f4 mb-6\">\n<div class=\"d-flex flex-items-center mb-3\">\n<svg aria-label=\"GitHub\" class=\"octicon octicon-mark-github mr-2 v-align-middle\" fill=\"#24292e\" height=\"20\" role=\"img\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"20\"><path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\" fill-rule=\"evenodd\"></path></svg>\n<a href=\"https://github.com/jasone\">\n          @jasone\n        </a>\n</div>\n<div class=\"d-flex flex-items-center mb-3\">\n<svg aria-label=\"Location\" class=\"octicon octicon-location mr-2 v-align-middle\" fill=\"#24292e\" height=\"20\" role=\"img\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"20\"><path d=\"M11.536 3.464a5 5 0 010 7.072L8 14.07l-3.536-3.535a5 5 0 117.072-7.072v.001zm1.06 8.132a6.5 6.5 0 10-9.192 0l3.535 3.536a1.5 1.5 0 002.122 0l3.535-3.536zM8 9a2 2 0 100-4 2 2 0 000 4z\" fill-rule=\"evenodd\"></path></svg>\n        Coeur d'Alene, Idaho, USA\n      </div>\n</div>\n</div>\n<div class=\"col-md-7 col-lg-8 col-xl-9 px-4 py-6 px-lg-7 border-top border-md-top-0 bg-gray-light\">\n<div class=\"mx-auto\" style=\"max-width: 900px;\">\n<div class=\"f4 mb-6\">\n<div class=\"f4\">\n<p class=\"f5\"><a class=\"d-flex flex-items-center\" href=\"https://jasone.github.io/\"><svg aria-label=\"Home\" class=\"octicon octicon-chevron-left mr-2 v-align-middle\" fill=\"#24292e\" height=\"16\" role=\"img\" version=\"1.1\" viewbox=\"0 0 16 16\" width=\"16\"><path d=\"M9.78 12.78a.75.75 0 01-1.06 0L4.47 8.53a.75.75 0 010-1.06l4.25-4.25a.75.75 0 011.06 1.06L6.06 8l3.72 3.72a.75.75 0 010 1.06z\" fill-rule=\"evenodd\"></path></svg>Home</a></p>\n<h1 class=\"f00-light lh-condensed\">jemalloc Postmortem</h1>\n<p class=\"text-gray mb-5\">Published Jun 12, 2025</p>\n<div class=\"article\">\n<p>The <a href=\"https://jemalloc.net/\">jemalloc</a> memory allocator was first conceived in early 2004, and has\nbeen in public use for about 20 years now. Thanks to the nature of open source software licensing,\njemalloc will remain publicly available indefinitely. But active upstream development has come to an\nend. This post briefly describes jemalloc’s development phases, each with some success/failure\nhighlights, followed by some retrospective commentary.</p>\n<h2 id=\"phase-0-lyken\">Phase 0: Lyken</h2>\n<p>In 2004 I began work on the Lyken programming language in the context of scientific computing. Lyken\nwas an eventual dead end, but its manual memory allocator was functionally complete by May 2005.\n(The garbage collector which was to leverage its features was never completed.) In September 2005 I\nstarted integrating the allocator into FreeBSD, and in March 2006 I removed the allocator from\nLyken, in favor of thin wrappers around system allocator functionality.</p>\n<p>Why remove the memory allocator from Lyken after so much effort went into it? Well, once the\nallocator was integrated into FreeBSD, it became apparent that the only feature missing from the\nsystem allocator was a mechanism for tracking allocation volume in order to trigger per thread\ngarbage collection. And that could be implemented via thin wrappers using thread-specific data and\n<a href=\"https://www.man7.org/linux/man-pages/man3/dlsym.3.html\">dlsym(3)</a>. Interestingly, many years later\njemalloc even added the statistics gathering that Lyken would have needed.</p>\n<h2 id=\"phase-1-freebsd\">Phase 1: FreeBSD</h2>\n<p>Back in 2005 the transition to multi-processor computers was ongoing. FreeBSD had Poul-Henning\nKamp’s excellent phkmalloc memory allocator, but that allocator had no provisions for parallel\nthread execution. Lyken’s allocator seemed like an obvious scalability improvement, and with\nencouragement from friends and colleagues I integrated what quickly became known as jemalloc. Ah,\nbut not so fast! Shortly after integration it became apparent that jemalloc had terrible\nfragmentation issues under some loads, notably those induced by <a href=\"https://kde.org/\">KDE</a>\napplications. Just when I thought I was mostly done, this real-world failure called jemalloc’s\nviability into question.</p>\n<p>In brief, the fragmentation issue arose from using a unified extent allocation approach (i.e. no\nsize class segregation). I had taken basic inspiration from Doug Lea’s\n<a href=\"https://gee.cs.oswego.edu/pub/misc/malloc.c\">dlmalloc</a>, but without the intertwined battle-tested\nheuristics that avoided many of the worst fragmentation issues. Much frantic research and\nexperimentation ensued. By the time jemalloc was part of a FreeBSD release, its layout algorithms\nhad completely changed to use size-segregated regions, as described in the <a href=\"https://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf\">2006 BSDCan jemalloc\npaper</a>.</p>\n<h2 id=\"phase-15-firefox\">Phase 1.5: Firefox</h2>\n<p>In November 2007, <a href=\"https://www.mozilla.org/en-US/firefox/new/\">Mozilla Firefox</a> 3 was nearing\nrelease, and high fragmentation was an unresolved issue, especially on Microsoft Windows. Thus began\na year of working with Mozilla on memory allocation. Porting jemalloc to Linux was trivial, but\nWindows was another matter. The canonical jemalloc sources were in the FreeBSD libc library, so we\nessentially forked jemalloc and added portability code, upstreaming anything that was relevant to\nFreeBSD. The entire implementation was still in one file, which reduced the friction of fork\nmaintenance, but the implementation complexity definitely surpassed what is reasonable in a single\nfile sometime during this phase of development.</p>\n<p>Years later, Mozilla developers made significant contributions to the upstream jemalloc in an effort\nto move away from their fork. Unfortunately, Mozilla benchmarks consistently showed that the forked\nversion outperformed the upstream version. I don’t know if this was due to overfitting to a local\noptimum or an actual indication of performance regression, but it remains one of my biggest jemalloc\ndisappointments.</p>\n<h2 id=\"phase-2-facebook\">Phase 2: Facebook</h2>\n<p>When I started work at Facebook in 2009, I was surprised to discover that the biggest impediment to\nubiquitous jemalloc use in Facebook infrastructure was instrumentation. Critical internal services\nwere in the awkward situation of depending on jemalloc to keep memory fragmentation under control,\nbut engineers needed to debug memory leaks with <a href=\"https://github.com/google/tcmalloc\">tcmalloc</a> and\nthe <code class=\"language-plaintext highlighter-rouge\">pprof</code> heap profiling tool that is part of\n<a href=\"https://github.com/gperftools/gperftools\">gperftools</a>. <code class=\"language-plaintext highlighter-rouge\">pprof</code>-compatible heap profiling\nfunctionality headlined the jemalloc 1.0.0 release.</p>\n<p>jemalloc development migrated to <a href=\"https://github.com/jemalloc/\">GitHub</a> and continued sporadically\nfor the next few years as issues and opportunities arose. Other developers started contributing\nsignificant functionality. Version 3.0.0 introduced extensive testing infrastructure, as well as\n<a href=\"https://valgrind.org/\">Valgrind</a> support. The 4.x release series introduced decay-based purging and\n<a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a>-formatted telemetry. The 5.x series transitioned from\n“chunks” to “extents” to pave the way for better interaction with 2 MiB huge pages.</p>\n<p>Somewhat more controversially, I removed Valgrind support in 5.0.0 because it was a significant\nmaintenance complication (numerous tendrils in subtle places), and it was unused inside Facebook;\nother tools like <code class=\"language-plaintext highlighter-rouge\">pprof</code> and <a href=\"https://clang.llvm.org/docs/MemorySanitizer.html\">MemorySanitizer</a>\ndominated. I had received very little feedback about Valgrind support, and extrapolated that it was\nnot being used. In retrospect, that seems not to have been the case. In particular, the <a href=\"https://www.rust-lang.org/\">Rust\nlanguage</a> directly incorporated jemalloc into compiled programs, and I\nthink there was some overlap between Rust developers and Valgrind developers. People were angry.\njemalloc was probably booted from Rust binaries sooner than the natural course of development might\nhave otherwise dictated.</p>\n<p>Facebook’s internal telemetry is a wonder to behold, and it is a massive boon to have performance\ndata from myriad services informing memory allocator development. I don’t think it’s an accident\nthat two of the fastest memory allocators of the past decade (tcmalloc and jemalloc) benefit from\nsuch data. Even “simple” things like fast-path optimizations are much easier to get right when there\nare aggregated <a href=\"https://en.wikipedia.org/wiki/Perf_%28Linux%29\">Linux perf</a> data on hand. Harder\nthings like fragmentation avoidance are still hard, but if thousands of distinct workflows behave\nwell with no outlier regressions, then a change is probably safe. jemalloc has benefited immensely\nfrom being integral to the Facebook infrastructure in terms of performance, resilience, and\nconsistent behavior. Additionally, jemalloc’s own integrated statistics reporting capabilities arose\ndirectly in response to this ubiquitous telemetry environment, and this turned out to generally\nbenefit both jemalloc development and non-Facebook application tuning/debugging far in excess of the\nimplementation effort required.</p>\n<p>During my last year at Facebook I was encouraged to build a small jemalloc team so that we could\ntackle some big tasks that would have been otherwise daunting. On top of major performance\nimprovements, we got things like continuous integration testing and comprehensive telemetry. When I\nleft Facebook in 2017, the jemalloc team carried on doing excellent development and maintenance work\nfor several years, almost entirely without my involvement, under the leadership of my esteemed\ncolleague, Qi Wang, and as evidenced by the commit history, with the excellent contributions of many\nothers.</p>\n<h2 id=\"phase-3-meta\">Phase 3: Meta</h2>\n<p>The nature of jemalloc development noticeably shifted around the time that Facebook rebranded itself\nas Meta. Facebook infrastructure engineering reduced investment in core technology, instead\nemphasizing <em>return</em> on investment. This is apparent in the jemalloc commit history. In particular,\nthe seeds for principled huge page allocation (HPA) were sown way back in 2016! HPA work continued\napace for several years, slowed, then stagnated as tweaks piled on top of each other without the\nrequisite refactoring that keeps a codebase healthy. This feature trajectory recently cratered. The\nheartbreak for me is somewhat blunted since I have not been closely involved for years, but as a\nresult of recent changes within Meta we no longer have anyone shepherding long-term jemalloc\ndevelopment with an eye toward general utility.</p>\n<p>I don’t want to dwell on drama, but it is perhaps worth mentioning that we reached a sad end for\njemalloc in the hands of Facebook/Meta even though most of the people involved were acting in good\nfaith. Corporate cultures shift in compliance with both external and internal pressures. And people\nfind themselves in impossible situations where the main choices are 1) make poor decisions under\nextreme pressure, 2) comply under extreme pressure, or 3) get routed around. As individuals we\nsometimes have enough influence to slow organizational degradation, maybe even contribute to\nisolated renaissances, but none of us can prevent the inevitable.</p>\n<p>I remain very grateful to my former colleagues for all their excellent work on jemalloc, and\nFacebook/Meta in general for investing so much, for so long.</p>\n<h2 id=\"phase-4-stasis\">Phase 4: Stasis</h2>\n<p>What now? As far as I am concerned, “upstream” jemalloc development has concluded. Meta’s needs\nstopped aligning well with those of external uses some time ago, and they are better off doing their\nown thing. Were I to reengage, the first step would be at least hundreds of hours of refactoring to\npay off accrued technical debt. And I’m not sufficiently excited by what would come after to pay\nsuch a high upfront cost. Perhaps others will create viable forks, whether from the <code class=\"language-plaintext highlighter-rouge\">dev</code> branch or\nfrom the 5.3.0 release (already three years old!).</p>\n<p>In above sections I mentioned several phase-specific failures, but there were some generic failures\nthat surprised me despite a career focused on open source development.</p>\n<ul>\n<li>As mentioned, removing Valgrind caused some bad sentiment. But the root of the problem is lack of\nawareness about external uses and needs. I probably would have worked with others to preserve\nValgrind support if I’d known that it mattered to anyone. As another example, I was completely\nunaware of jemalloc’s use as the\n<a href=\"https://en.wikipedia.org/wiki/Android_(operating_system)\">Android</a> memory allocator for perhaps\ntwo years. And years later, unaware of its replacement until after the fact.</li>\n<li>Even though jemalloc development remained completely out in the open (not siloed inside Facebook),\nthe project never grew to retain primary contributors from other organizations. The Mozilla effort\nby Mike Hommey to move Firefox to the upstream jemalloc was a near miss. Efforts by others to\ntransition to a <a href=\"https://cmake.org/\">CMake</a>-based build system stalled multiple times, and never\ncrossed the finish line. I knew from hard experience with\n<a href=\"https://en.wikipedia.org/wiki/Darwin_(operating_system)\">Darwin</a> that internally siloed open\nsource projects cannot thrive (<a href=\"https://hhvm.com/\">HHVM</a> was a repeat lesson), but jemalloc needed\nmore than open development to thrive as an independent project.</li>\n</ul>\n<p>jemalloc was an odd diversion for me, since I have been a strong proponent of garbage collection\nover manual memory management for over 25 years. Personally I’m happy to be working again on\ngarbage-collected systems, but jemalloc was a tremendously fulfilling project. Thank you to everyone\nwho made this project so worthwhile, collaborators, supporters, and users alike.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>", "article_metadata": {"title": "jemalloc Postmortem", "description": "The jemalloc memory allocator was first conceived in early 2004, and hasbeen in public use for about 20 years now. Thanks to the nature of open source software licensing,jemalloc will remain publicly available indefinitely. But active upstream development has come to anend. This post briefly desc...", "og_image": "https://avatars.githubusercontent.com/u/245970?v=4"}, "screenshot_path": "/static/screenshots/44264958.png", "screenshot_error": null, "hook": "After two decades of powering countless applications, the renowned jemalloc memory allocator is entering a new phase: retirement.  This postmortem reveals the surprising twists and turns of its development, from its humble beginnings as a component of a defunct programming language to its unexpected triumphs and ultimately, its graceful exit.  Discover the untold story of a memory management legend and the lessons learned along the way.", "top_comments": [{"author": "matoro", "text": "That was me that filed the Itanium test suite failure. :)", "depth": 0}, {"author": "kabdib", "text": "one of the best books on Linux architecture i've read was the one on the Itanium port\n\ni think, because Itanic broke a ton of assumptions", "depth": 1}, {"author": "apaprocki", "text": "Ah, porting to HP Superdome servers. It’s like being handed a brochure describing the intricate details of the iceberg the ship you just boarded is about to hit in a few days.\n\nA fellow traveler, ahoy!", "depth": 2}, {"author": "cogman10", "text": "I worked on the Superdome servers back in the day. What a weird product. I still can't believe it was a profitable division (at my time circa 2011).\n\nHP was going through some turbulent waters in those days.", "depth": 2}, {"author": "boulos", "text": "The Itanic was kind of great :). I'm convinced it helped sink SGI.", "depth": 3}, {"author": "froh", "text": "Sunk by the Great Itanic ?", "depth": 2}, {"author": "crest", "text": "Itanium did its most most important job: it killed everything but ARM and POWER.", "depth": 3}, {"author": "acdha", "text": "SGI and HP! Intel should have a statue of Rick Belluzzo on they’r campus.", "depth": 3}, {"author": "sitkack", "text": "Why was the sinking of SGI great?", "depth": 3}, {"author": "boulos", "text": "Oh, that wasn't the intent. I meant two separate things. The Itanic itself was kind of fascinating, but mostly panned (hence the nickname).\n\nSGI's decision to built out Itanium systems may have helped precipitate their own downfall. That was sad.", "depth": 3}], "analysis": {"analysis": "**1. Summary:**\n\nThis technical article details the 20-year history of the jemalloc memory allocator, from its origins as part of a now-defunct programming language to its widespread adoption and eventual sunsetting of active development.  The author highlights key challenges, such as initial fragmentation issues and the complexities of porting to different operating systems, particularly Windows.\n\n**2. Key Points:**\n\n* **Evolution of jemalloc:** The allocator began as part of the Lyken programming language, then transitioned to FreeBSD, facing and overcoming significant fragmentation problems.  A crucial phase involved collaboration with Mozilla for Firefox 3, necessitating a port to Windows.\n* **Technical Challenges:**  The initial design lacked size-class segregation, leading to severe fragmentation.  Overcoming this required substantial redesign and algorithmic changes.  Porting to Windows proved significantly more difficult than Linux.\n* **End of Active Development:**  Despite its widespread use and continued availability as open-source software, active upstream development of jemalloc has concluded.\n* **Impact on other projects:** jemalloc's development was intertwined with the evolution of FreeBSD and Mozilla Firefox, significantly impacting their performance and stability.\n\n**3. Discussion Highlights:**\n\nThe comments section focuses largely on the challenges of porting jemalloc (and other software) to Itanium-based systems, highlighting the difficulties and unusual architectural features of this platform.  Several commenters express a mixture of nostalgia and amusement regarding the Itanium architecture and its impact on the hardware industry, particularly its perceived role in the decline of SGI and the rise of ARM and POWER architectures.  There's a debate about whether the Itanium's failure was a positive or negative development for the industry, with some viewing it as a fascinating, albeit ultimately unsuccessful, technological experiment.  The overall tone is one of technical reminiscence and reflection on the broader landscape of computing hardware evolution.", "metadata": {"model": "gemini-1.5-flash", "content_length": 10960, "comments_analyzed": 10}}, "has_more": true}