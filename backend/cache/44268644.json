{"hn_id": "44268644", "title": "Show HN: Tattoy – a text-based terminal compositor", "url": "https://news.ycombinator.com/item?id=44268644", "article_url": "https://tattoy.sh", "points": 127, "author": "tombh", "comments_count": 33, "time": 0, "full_article_html": "<main class=\"layout__content\"><div class=\"container\"><div id=\"home-logo\"><pre><span style=\"color:#005fd7;background-color:#000\">                     </span><span style=\"color:#0087ff;background-color:#000\">   </span><span style=\"color:#005fd7;background-color:#000\">     </span><span style=\"color:#005fff;background-color:#000\">  </span><span style=\"color:#005fd7;background-color:#000\"> </span><span style=\"color:#005fff;background-color:#000\"> </span><span style=\"color:#005fd7;background-color:#000\"> </span><span style=\"color:#005fff;background-color:#000\"> </span><span style=\"color:#005fd7;background-color:#000\">  </span><span style=\"color:#005fff;background-color:#000\"> </span><span style=\"color:#005fd7;background-color:#000\">                  </span><span style=\"color:#696969;background-color:#000\">     </span><span style=\"color:gray;background-color:#000\"> </span><span style=\"color:#696969;background-color:#000\">   \n</span><span style=\"color:#005fd7;background-color:#000\">                   </span><span style=\"color:#0087ff;background-color:#000\">   </span><span style=\"color:#005fd7;background-color:#000\">    </span><span style=\"color:#005fff;background-color:#000\"> </span><span style=\"color:#0087ff;background-color:#000\"> _.</span><span style=\"color:#005fff;background-color:#000\"> </span><span style=\"color:#005fd7;background-color:#000\">      </span><span style=\"color:#0087ff;background-color:#000\">_.</span><span style=\"color:#005fd7;background-color:#000\">.                </span><span style=\"color:gray;background-color:#000\">   </span><span style=\"color:#696969;background-color:#000\"> </span><span style=\"color:#005fff;background-color:#000\"> </span><span style=\"color:gray;background-color:#000\"> </span><span style=\"color:#696969;background-color:#000\">   \n</span><span style=\"color:#005fd7;background-color:#000\">       </span><span style=\"color:#005fff;background-color:#000\">_</span><span style=\"color:#0087ff;background-color:#000\">.._ </span><span style=\"color:#005fd7;background-color:#000\">   </span><span style=\"color:#005fff;background-color:#000\">  _</span><span style=\"color:#0087ff;background-color:#000\">.._</span><span style=\"color:#005fd7;background-color:#000\"> </span><span style=\"color:#005fff;background-color:#000\">   </span><span style=\"color:#005fd7;background-color:#000\">  </span><span style=\"color:#0087ff;background-color:#000\">:$$</span><span style=\"color:#005fff;background-color:#000\">L</span><span style=\"color:#005fd7;background-color:#000\">      </span><span style=\"color:#0087ff;background-color:#000\">$$$</span><span style=\"color:#005fd7;background-color:#000\">  _. </span><span style=\"color:#005fff;background-color:#000\">  </span><span style=\"color:#0087ff;background-color:#000\"> _...</span><span style=\"color:#005fff;background-color:#000\">_</span><span style=\"color:#005fd7;background-color:#000\">  </span><span style=\"color:#005fff;background-color:#000\"> ..</span><span style=\"color:#0087ff;background-color:#000\">  </span><span style=\"color:gray;background-color:#000\"> </span><span style=\"color:#005fff;background-color:#000\"> </span><span style=\"color:#0087ff;background-color:#000\">._ \n</span><span style=\"color:#005fd7;background-color:#000\"> _,;i</span><span style=\"color:#005fff;background-color:#000\">$$$</span><span style=\"color:#0087ff;background-color:#000\">$$$</span><span style=\"color:#005fd7;background-color:#000\">$  .</span><span style=\"color:#005fff;background-color:#000\">d$$</span><span style=\"color:#0087ff;background-color:#000\">$$$</span><span style=\"color:#005fff;background-color:#000\">$L</span><span style=\"color:#005fd7;background-color:#000\">   _.</span><span style=\"color:#005fff;background-color:#000\">$$</span><span style=\"color:#005fd7;background-color:#000\">$$$$:  </span><span style=\"color:#005fff;background-color:#000\">$$</span><span style=\"color:#005fd7;background-color:#000\">$d$$: </span><span style=\"color:#005fff;background-color:#000\">.</span><span style=\"color:#0087ff;background-color:#000\">d$$$</span><span style=\"color:#005fff;background-color:#000\">$$$$b.</span><span style=\"color:#0087ff;background-color:#000\">`$</span><span style=\"color:#005fff;background-color:#000\">$b.</span><span style=\"color:#0087ff;background-color:#000\"> $</span><span style=\"color:#005fff;background-color:#000\">$l\n</span><span style=\"color:#005fd7;background-color:#000\">$$$$$$</span><span style=\"color:#005fff;background-color:#000\">$$</span><span style=\"color:#005fd7;background-color:#000\">P\"`` j$$P\"\"</span><span style=\"color:#005fff;background-color:#000\">4$</span><span style=\"color:#005fd7;background-color:#000\">$$: :$$$$$P\" .;i$$$P`` J$$P\"```\"4$$L</span><span style=\"color:gray;background-color:#000\"> </span><span style=\"color:#005fd7;background-color:#000\">T$$b$$:\n\"``  :$$    :$$$L..j$$$l  \"``$$$  $$P$$$   :$$:      </span><span style=\"color:#0000af;background-color:#000\">:</span><span style=\"color:#005fd7;background-color:#000\">$$$</span><span style=\"color:gray;background-color:#000\">  </span><span style=\"color:#005fd7;background-color:#000\">:$$$$</span><span style=\"color:gray;background-color:#000\"> \n</span><span style=\"color:#005fd7;background-color:#000\">  </span><span style=\"color:#0000d7;background-color:#000\">  </span><span style=\"color:#005fd7;background-color:#000\"> </span><span style=\"color:#0000d7;background-color:#000\">i$$:  </span><span style=\"color:#005fd7;background-color:#000\"> </span><span style=\"color:#0000d7;background-color:#000\">T$$$$$P\"$$$$</span><span style=\"color:#005fd7;background-color:#000\">    </span><span style=\"color:#0000d7;background-color:#000\"> T$$:</span><span style=\"color:#005fd7;background-color:#000\"> ` </span><span style=\"color:#0000d7;background-color:#000\"> l$$:</span><span style=\"color:#005fd7;background-color:#000\">  `$$b,.___.d$$F</span><span style=\"color:gray;background-color:#000\">   </span><span style=\"color:#005fd7;background-color:#000\">$$$:</span><span style=\"color:gray;background-color:#000\"> \n</span><span style=\"color:#005fd7;background-color:#000\">   </span><span style=\"color:#0000d7;background-color:#000\">  $$$i  </span><span style=\"color:#005fd7;background-color:#000\">  </span><span style=\"color:#0000d7;background-color:#000\">`</span><span style=\"color:#0000af;background-color:#000\">\"\"\"`   `\"\"  </span><span style=\"color:#005fd7;background-color:#000\">   </span><span style=\"color:#0000af;background-color:#000\">`\"\"`    ``\"\" </span><span style=\"color:#0000d7;background-color:#000\">   `4$$$$$$$P`</span><span style=\"color:gray;background-color:#000\">  </span><span style=\"color:#005fd7;background-color:#000\"> </span><span style=\"color:#0000d7;background-color:#000\">.$$F </span><span style=\"color:gray;background-color:#000\"> \n</span><span style=\"color:#005fd7;background-color:#000\">    </span><span style=\"color:#0000af;background-color:#000\">  `\"\"      </span><span style=\"color:#005fd7;background-color:#000\">  </span><span style=\"color:#0000af;background-color:#000\"> </span><span style=\"color:#0000d7;background-color:#000\">  </span><span style=\"color:#0000af;background-color:#000\">      </span><span style=\"color:#005fd7;background-color:#000\">               </span><span style=\"color:#0000af;background-color:#000\">    </span><span style=\"color:#005fd7;background-color:#000\">  </span><span style=\"color:#0000af;background-color:#000\"> `\"\"\"` </span><span style=\"color:#0000d7;background-color:#000\">   ;i$$F   \n</span><span style=\"color:#696969;background-color:#000\">      </span><span style=\"color:#0000d7;background-color:#000\">             </span><span style=\"color:#696969;background-color:#000\">                                  </span><span style=\"color:#0000af;background-color:#000\">    ```   </span><span style=\"color:#0000d7;background-color:#000\"> </span><span style=\"color:gray;background-color:#000\"> \n</span>\n</pre></div><div class=\"media-content\"><h2 id=\"home-subtitle\">A Text-Based Compositor For Modern Terminals</h2><div id=\"home-content\"><div class=\"screenshot\"><div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><img alt=\"Article image\" data-src=\"https://tattoy.sh/assets/screenshots/hero.webp\" loading=\"lazy\" onerror=\"this.style.display='none'\" src=\"https://tattoy.sh/assets/screenshots/hero.webp\"/></div></div><div class=\"screenshot-caption\">Tattoy with a GPU-rendered shader and live-updating minimap of the TTY scrollback.</div></div><div class=\"home-feature\"><h2>About</h2><p>Tattoy can generally be thought of as a framework for adding eye-candy to your terminal. It is purely text-based so works in any terminal emulator that supports true colour. \"Graphics\" is rendered with UTF8 half-blocks (▀,▄). Whilst most of its effects are for getting you street credibility it also has more powerful features based around its awareness of terminal contents. For example it can detect and auto adjust text contrast whilst remaining faithful to the terminal's palette.</p><p>Tattoy works with your existing shell, theme and prompt, etc. It can always and immediately toggle between its effects and your normal terminal state, allowing for easy copy-pasting for example.</p></div><div class=\"home-feature\"><h2>Shaders</h2><p>Perhaps the fanciest feature of Tattoy is its ability to render GPU shaders. It is designed to be able to run most shaders from <a href=\"https://www.shadertoy.com/\">Shader Toy</a> without any editing at all. It also supports <a href=\"https://github.com/hackr-sh/ghostty-shaders\">Ghostty shaders</a> out-of-the-box, though certain shaders that alter the position of text (such as CRT emulators) don't have a pronounced impact as text rendering is always left to the host terminal emulator.</p><div class=\"screenshot-row\"><div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/shader1.webm\"/></video></div></div><div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/shader2.webm\"/></video></div></div><div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/shader3.webm\"/></video></div></div><div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/shader4.webm\"/></video></div></div></div></div><div class=\"home-feature\"><h2>Second Terminal In Background</h2><div class=\"home-feature-flex\"><span class=\"home-feature__text\"> You can run an arbitrary command that is rendered in the background of your normal terminal. Use-cases for this might be: <ul><li>an audio visualiser</li><li>video background</li><li>system monitor graphs</li></ul> The background terminal's opacity can be adjusted so it doesn't visual conflict too much with your actual terminal. </span><span class=\"home-feature__screenshot\"> <div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/rick.webm\"/></video></div></div> </span></div></div><div class=\"home-feature\"><h2>Scrollback Minimap</h2><div class=\"home-feature-flex\"><span class=\"home-feature__screenshot\"> <div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/minimap.webm\"/></video></div></div> </span><span class=\"home-feature__text\"> The minimap is a pixelised version of the contents of the scrollback, including the current contents of the screen. It live updates, even when using the so-called \"alternate screen\" for apps like `nvim`, `top`, `gitui`, etc. <p>Tattoy manages its own scrollback buffer (like say `tmux` does), and so can therefore also provide its own scrollbar.</p> </span></div></div><div class=\"home-feature\"><h2>Auto Text Contrast</h2><div class=\"home-feature-flex\"><span class=\"home-feature__text\"> Have you ever run `ls` in a directory only for certain file types to be completely illegible? This has long been an intractable problem caused by the limited colours of terminal palettes. CLI applications are only ever aware of palette index values, not the underlying RGB value, therefore it is impossible for them to know if any given background colour is sufficient enough to allow its containing text to be readable. <p>Not anymore!</p> <p>Tattoy is aware of the true 24 bit RGBA value of all colours in your terminal. This allows it to use clever algorithms to detect low contrast text and auto adjust the foreground colour within the constraints of your chosen terminal theme to find the nearest colour that meets a minimum contrast threshold.</p> </span><span class=\"home-feature__screenshot\"> <div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/contrast.webm\"/></video></div></div> </span></div></div><div class=\"home-feature\"><h2>Plugins</h2><div class=\"home-feature-flex\"><span class=\"home-feature__screenshot\"> <div class=\"window\"><div class=\"winhead\"><div class=\"winbutton\"><div class=\"close\"></div><div class=\"min\"></div><div class=\"max\"></div></div><div class=\"title\"></div></div><div class=\"winbody\"><video autoplay=\"\" loop=\"\" muted=\"\"><source src=\"assets/screenshots/plugins.webm\"/></video></div></div> </span><span class=\"home-feature__text\"> Plugins can be written in any language. You get full access to your terminal's contents and can render both UTF8 \"pixels\" and text to a dedicated plugin layer of your choosing. Currently the protocol is JSON over `STDIN` and `STDOUT`. See the <a href=\"https://tattoy.sh/docs/plugins\">plugin documentation</a> for more info. <p>Here we see the cursor giving off smoke particles that interact with the terminal's text. The source code can be found <a href=\"https://github.com/tattoy-org/tattoy/tree/main/crates/tattoy-plugins/smokey_cursor\">here</a>.</p> </span></div></div></div></div></div></main>", "article_metadata": {"title": "Tattoy", "description": "Text-based terminal compositor", "og_image": "https://tattoy.sh/assets/tattoy_logo.png"}, "screenshot_path": "/static/screenshots/44268644.png", "screenshot_error": null, "hook": "Tired of bland terminal text?  Tattoy injects vibrant, GPU-accelerated visuals into your command line,  transforming your terminal with customizable shaders, background processes, and even a live scrollback minimap—all without sacrificing functionality.  Experience the future of terminal aesthetics.", "top_comments": [{"author": "tombh", "text": "I didn't intend for the videos to be fullscreen. They need to be small in order to save bandwidth. They're certainly autoplaying (to replicate GIF behaviour), but maybe there's a bug with them going full screen. What browser are you using?", "depth": 0}, {"author": "phatskat", "text": "I get the same experience on iOS using the OS web view - my guess is because iOS (and maybe android?) don’t typically play videos in “windowed mode” (for lack of a better term) outside of eg Google video snippets which seem to do some hacky stuff to keep you “in Google” while watching.\n\nRegardless of the fullscreen aspect, and understanding you wanted something jiff-like, I also don’t care much for auto playing video. It doesn’t matter too much if it’s small (as this is intended), silent (as terminals typically are), and doesn’t hoist control of my browser.\n\nEdit: forgot to say that this looks really cool, great work!\n\nEditedit: also forgot to mention that the thumbnails are super blurry on my phone, and after the one video took control of the screen, all the other thumbnails went black.", "depth": 1}, {"author": "djaychela", "text": "Firefox on ios. They are full the screen and auto play as soon as I get to whatever part of the page they are on.\n\nTbh I think giving the user voice as to whether to play them would be a better experience anyway, but it's really unusable as is.", "depth": 2}, {"author": "tfsh", "text": "This looks really cool, I'd like to give it a go. The idea of taking a screenshot of the terminal and then parsing that to determine the true colour support is definitely novel, though perhaps so, because for me I can't get it to work. Are there any debug flags I can enable?\n\nSo far it was able to take the screenshot correctly (https://ibin.co/8kaRr8TIanv2.png), however the parsing of that fails with the non-descript \"Palette parsing failed.\" error.\n\nEdit: enabled tracing at got this: https://paste.ee/p/ZyNxG9FK", "depth": 2}, {"author": "shiomiru", "text": "> The idea of taking a screenshot of the terminal and then parsing that to determine the true colour support is definitely novel,\n\nA better way to do this is to send `OSC 1 0 ; ? ST` (query foreground color), `OSC 1 1 ; ? ST` (background color), then `OSC 4 ; {n} ; ? ST` where {n} is the nth XTerm color.\n\nSee: https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h4-O...", "depth": 0}, {"author": "tombh", "text": "OMG really!? That link is blocked for me for some reason. If that OSC code is widely supported it's going to make things sooooo much easier.", "depth": 1}, {"author": "tombh", "text": "Thanks for trying it out. It looks like either your terminal or screenshotter isn't faithfully rendering the pure red marker column (it's needed for calibration in the parser). The red should be #ff0000, but the screenshot is using #ea3323. I've made a Github issue to keep track https://github.com/tattoy-org/tattoy/issues/98 If you can add more details it'd really useful, I'm sure there'll be more people like you.", "depth": 2}, {"author": "cenobyte", "text": "Because why shouldn't my terminal be the largest consumer of memory on my PC?", "depth": 1}, {"author": "tines", "text": "I paid for 32GB, I’m gonna use 32GB.", "depth": 0}, {"author": "pvg", "text": "Repo link https://github.com/tattoy-org/tattoy", "depth": 1}], "analysis": {"analysis": "**1. Summary:**\n\nTattoy is a text-based compositor for modern terminals that enhances the visual experience using GPU shaders, a live-updating scrollback minimap, and automatic text contrast adjustment.  It leverages UTF8 characters and works with existing shell configurations, offering togglable effects for seamless workflow.\n\n**2. Key Points:**\n\n* **GPU Shader Support:** Tattoy can render shaders from ShaderToy and Ghostty, adding visual effects to the terminal.  However, some effects altering text position may be limited by the terminal emulator.\n* **Background Terminal:** Allows running a secondary command in the background (e.g., audio visualizers, system monitors) with adjustable opacity.\n* **Scrollback Minimap:** Provides a live-updating, pixelized representation of the terminal scrollback, including a scrollbar.  It functions even with applications using the alternate screen.\n* **Auto Text Contrast:**  Intelligently adjusts text color to ensure readability based on the true 24-bit RGBA color values, solving contrast issues in terminals with limited palettes.\n* **Purely Text-Based:**  Uses UTF8 half-blocks for \"graphics,\" ensuring compatibility with any true color terminal emulator.\n\n\n**3. Discussion Highlights:**\n\nThe comments reveal both enthusiasm and some initial challenges with Tattoy.  Users reported issues with autoplaying fullscreen videos, suggesting a potential bug related to browser or OS compatibility (iOS and Android web views specifically mentioned).  A user suggested using OSC escape sequences for color detection, which the developer found promising and potentially more efficient than the current screenshot-based method.  Other comments highlight the resource intensity of the application, with some users jokingly embracing the high memory usage, while others expressed difficulty getting the software to work, possibly due to issues with color rendering fidelity.  Finally, a GitHub repository link was provided, indicating ongoing development and community engagement.", "metadata": {"model": "gemini-1.5-flash", "content_length": 3428, "comments_analyzed": 10}}, "has_more": true}